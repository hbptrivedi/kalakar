'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});
exports['default'] = reduxReactFetch;
var start = {
  opacity: 0.5,
  transition: 'opacity .5s ease-in-out'
};

var end = {
  opacity: 1,
  transition: 'opacity .5s ease-in-out'
};

var endFail = {
  opacity: 1,
  border: 'solid red 1px',
  transition: 'opacity .5s ease-in-out'
};

var options = {
  credentials: 'same-origin',
  method: 'post',
  headers: {
    'Accept': 'application/json',
    'Content-Type': 'application/json'
  }
};

function reduxReactFetch(fetch, config) {
  if (!config) config = {};

  return function (store) {
    return function (next) {
      return function (action) {
        // eslint-disable-line
        if (!action.body || !action.url) return next(action);

        function makeAction(done, response, then, failed) {
          var merge = {
            style: done ? failed ? config.endFail || endFail : config.end || end : config.start || start
          };

          if (response && typeof response.result == 'object') response.result.style = merge.style;
          var newAction = Object.assign({}, action, { done: done, failed: failed, response: response, type: then ? then : action.type });
          delete newAction.options;
          delete newAction.url;
          delete newAction.then;

          if (action.mergeTo) newAction[action.mergeTo] = Object.assign({}, newAction[action.mergeTo], merge);else newAction.body = Object.assign({}, newAction.body, merge);

          if (then) newAction.type = then;
          if (!action['catch'] && failed) newAction.type = action.type || 'failed';
          return newAction;
        }

        next(makeAction(false));
        var body = action.body;
        if (action.body.constructor.name == 'Object') body = JSON.stringify(action.body);
        return fetch(action.url, Object.assign({}, action.options || options, { body: body })).then(function (response) {
          return response.json();
        }).then(function (result) {
          return next(makeAction(true, { result: result }, action.then, false));
        })['catch'](function (error) {
          return next(makeAction(true, { error: error }, action['catch'], true));
        });
      };
    };
  };
}

module.exports = exports['default'];
